#include <iostream>#include <vector>#include <cstdlib>#include <fstream>using namespace std;class TBigUInt {	public:		TBigUInt ();		TBigUInt (int);		TBigUInt operator - () const;		TBigUInt abs(const TBigUInt&) const;				bool operator == (const TBigUInt&) const;		bool operator < (const TBigUInt&) const;		bool operator > (const TBigUInt&) const;		bool operator <= (const TBigUInt&) const;		bool operator >= (const TBigUInt&) const;		bool operator != (const TBigUInt&) const;		TBigUInt operator + (const TBigUInt&) const;		TBigUInt operator - (const TBigUInt&) const;		TBigUInt operator * (const TBigUInt&) const;		TBigUInt operator / (const TBigUInt&) const;		TBigUInt operator % (const TBigUInt&) const;				TBigUInt& operator += (const TBigUInt&);		TBigUInt& operator -= (const TBigUInt&);		TBigUInt& operator *= (const TBigUInt&);		TBigUInt& operator /= (const TBigUInt&);		TBigUInt& operator %= (const TBigUInt&);				TBigUInt& operator ++ ();		TBigUInt operator ++ (int);		TBigUInt& operator -- ();		TBigUInt operator -- (int);	    friend TBigUInt KaratsubaMultiply(const TBigUInt&, const TBigUInt&);        TBigUInt (const TBigUInt &other, size_t from, size_t to) {            if (from>=other.figure.size())                    figure.push_back(0);            else                    if (to<=other.figure.size())                            for (size_t i=from; i<to; ++i)                                    figure.push_back(other.figure[i]);                    else                             for (size_t i=from; i<other.figure.size(); ++i)                                    figure.push_back(other.figure[i]);        }		friend ostream& operator <<(ostream&,const TBigUInt&);        friend istream& operator >>(istream&,TBigUInt&);             	private:		static const unsigned BASE = 10;		bool negative;		vector <unsigned char> figure;				void reverse();		void add(const TBigUInt&);		bool LessThan(const TBigUInt&); //сравнение по модулю для чисел, записанных задом наперед		void DeleteLeadingZeros();};