<wiki:toc max_depth="5" />

=Семестр 1=

== Задание 1. Bubble Sort ==

Deadline: 2012.10.08

Необходимо написать программу сортировки массива чисел с использованием алгоритма BubbleSort.

Прим.:
  1. Алгоритм сортировки должен быть реализован в отдельной функции BubbleSort.
  2. Программа должна резервировать объем памяти, минимально необходимый для сортировки указанного кол-ва чисел.

*Input:*

Чтение из stdin.
В первой строке - кол-во чисел N (1 <= N <= 1e9).
Во второй строке - N чисел, разделенных пробелом (значения чисел лежат в  диапазоне [-1e9; +1e9]).

*Output:*

Вывод в stdout.
Строка чисел, отсортированных по возрастанию (разделитель - пробел).

== Задание 2. Merge Sort ==

Deadline: 2012.10.08

Необходимо написать программу сортировки массива чисел с использованием алгоритма MergeSort.

Примечания и формат ввода/вывода см. в Задании 1.

== Задание 3. Insert Sort ==

Deadline: 2012.10.08

Необходимо написать программу сортировки массива чисел с использованием алгоритма InsertSort.

Примечания и формат ввода/вывода см. в Задании 1.

== Задание 4. Quick Sort ==

Deadline: 2012.10.08

Необходимо написать программу сортировки массива чисел с использованием алгоритма QuickSort.

Примечания и формат ввода/вывода см. в Задании 1.

== Задание 5. Radix Sort ==

Deadline: 2012.10.15

Необходимо написать программу сортировки массива чисел с использованием алгоритма RadixSort.

Примечания и формат ввода/вывода см. в Задании 1.


== Задание 6. Heap Sort ==

Deadline: 2012.10.22

Необходимо написать программу сортировки массива чисел с использованием алгоритма HeapSort.

Примечания и формат ввода/вывода см. в Задании 1.

== Задание 7. Сравнение алгоритмов сортировки ==

Deadline: 2012.10.22

Необходимо написать программу, оценивающую скорость работы каждого алгоритма сортировки из заданий 2-6, а также встроенной функции qsort.

*Input:*
Программа должна принимать на stdin одно число: размер массива.

*Output:*
В stdout для каждого алгоритма - строчка:
<НазваниеАлгоритма> <время работы алгоритма в мс> <корректность работы (true/false)>

Для оценки времени работы алгоритма программа должна:

  1. Генерировать массив чисел типа int в диапазоне [-1e9; +1e9].

  2. Вызывать соответствующий алгоритм, измеряя время его работы.

  3. Проверять корректность сортировки (числа в результирующем массиве должны лежать по неубыванию). Для проверки корректности должна быть отдельная функция, принимающая на вход массив.

После реализации программы, необходимо запустить ее для разного объема данных: 1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8. По полученным данных построить график зависимости времени работы от размера задачи (в чем удобно: Excel, Python/matplotlib, ...).
Скрин графика приложить к Issue.

Прим.: Для оценки времени используйте функцию clock(), а не GetTickCount(). Последняя выдает текущее время. А clock честно считает процессорные такты Вашего процесса. К тому же, GetTickCount не входит в стандарт С++ (Visual Studio specific). Подробнее об этой функции можно почитать здесь: http://www.cplusplus.com/reference/clibrary/ctime/clock/

== Задание 8. Расщепление строки ==

Напишите программу, расщепляющую строку по указанному разделителю.

*Input:*

На stdin приходят две строки (не содержащие пробелов, символов табуляции и переноса строк). Первая строка - которую нужно расщепить. Вторая - разделитель. Размер строк - не более 10000 символов.

*Output:*

В stdout - результат в виде списка строк: каждая строка на отдельной строчке в консоли.

*Доп. требования:*

В программе должна быть реализована функция расщепления строки со следующей сигнатурой:
char** split(const char *str, const char *delim);

А также функция удаления результата работы первой функции:
void delete_string_array(char **str);